from docx import Document
import openai
import json
import os
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT  # Pour aligner les paragraphes
from docx.shared import Inches  # Pour d√©finir les positions en pouces
import docx2txt
import streamlit as st
import tempfile
import re
from datetime import datetime
from pydantic import BaseModel, Field
from typing import List
from openai import OpenAI
import fitz  # PyMuPDF


openai.api_key = st.secrets["OPENAI_API_KEY"]

client = OpenAI()


def preprocess_text(text: str) -> str:
    """
    Nettoie le texte extrait avant envoi au LLM.
    
    Args:
        text: Texte brut √† nettoyer
        
    Returns:
        Texte nettoy√©
    """
    # 1. Supprimer les codes Unicode (\uXXXX)
    text = re.sub(r'\\u[0-9a-fA-F]{4}', '', text)
    
    # 2. Remplacer les espaces multiples par un seul espace
    text = re.sub(r' +', ' ', text)
    
    # 3. Remplacer les sauts de ligne multiples par double saut de ligne
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    return text.strip()


def extract_text_from_pdf(file_path: str) -> str:
    """
    Extrait le texte d'un fichier PDF avec preprocessing.
    
    Args:
        file_path: Chemin vers le fichier PDF
        
    Returns:
        Texte extrait et nettoy√© du PDF
    """
    try:
        doc = fitz.open(file_path)
        text = ""
        for page in doc:
            text += page.get_text()
        doc.close()
        
        return preprocess_text(text)
        
    except Exception as e:
        raise Exception(f"Erreur lors de l'extraction PDF: {str(e)}")


def extract_text_from_word(file_path: str) -> str:
    """
    Extrait le texte d'un fichier Word avec preprocessing.
    
    Args:
        file_path: Chemin vers le fichier Word
        
    Returns:
        Texte extrait et nettoy√© du fichier Word
    """
    try:
        document = Document(file_path)
        text = "\n".join([paragraph.text for paragraph in document.paragraphs])
        
        return preprocess_text(text)
        
    except Exception as e:
        raise Exception(f"Erreur lors de l'extraction Word: {str(e)}")


def extract_text_from_file(file_path: str) -> str:
    """
    Extrait le texte d'un fichier, qu'il soit PDF ou Word.

    Args:
        file_path: Chemin vers le fichier

    Returns:
        Texte extrait du fichier
    """
    if file_path.lower().endswith('.pdf'):
        return extract_text_from_pdf(file_path)
    elif file_path.lower().endswith('.docx'):
        return extract_text_from_word(file_path)
    else:
        raise ValueError("Format de fichier non support√©. Seuls les fichiers PDF et Word sont accept√©s.")

    
def generate_trigramme(prenom, nom):
    """
    G√©n√®re le trigramme : premi√®re lettre du pr√©nom + deux premi√®res consonnes du nom.
    Exemple : C√©dric GOBERT -> CGB
    """
    prenom = prenom.strip().upper() if prenom else ""
    nom = nom.strip().upper() if nom else ""
    # Enlever les espaces pour les noms compos√©s
    nom_sans_espace = nom.replace(" ", "")
    first_letter = prenom[0] if prenom else ""
    consonnes = re.sub(r'[AEIOUY]', '', nom_sans_espace)
    trigramme = first_letter + consonnes[:2]
    return trigramme
    

class Projet(BaseModel):
    CLIENT_NOM: str = Field(..., description="Nom du client.")
    DATE_DEBUT: str = Field(..., description="Date de d√©but du projet au format MM/AAAA.")
    DATE_FIN: str = Field(..., description="Date de fin du projet au format MM/AAAA.")
    INTITULE_POSTE: str = Field(..., description="Intitul√© du poste occup√©.")
    INTITULE_PROJET: str = Field(..., description="Intitul√© du projet r√©alis√©.")
    DETAILS_PROJET: str = Field(None, description="Informations suppl√©mentaires tel que le budget, les effectifs et les heures sans accident")
    REALISATION: List[str] = Field(..., description="R√©alisations principales du projet.")


class Diplome(BaseModel):
    ANNEE_DIPLOME: str = Field(..., description="Ann√©e d'obtention du dipl√¥me.")
    INTITULE_DIPLOME: str = Field(..., description="Intitul√© complet du dipl√¥me obtenu.")


class Langue(BaseModel):
    LANGUE: str = Field(..., description="Nom de la langue parl√©e.")
    NIVEAU: str = Field(..., description="Niveau de ma√Ætrise de la langue (exemple : Courant, Interm√©diaire).")


class FormationComplementaire(BaseModel):
    ANNEE_FORMATION: str = Field(..., description="Ann√©e de la formation compl√©mentaire.")
    INTITULE_FORMATION: str = Field(..., description="Intitul√© complet de la formation compl√©mentaire.")


class CVInfo(BaseModel):
    PRENOM: str = Field(..., description="pr√©nom")
    NOM: str = Field(..., description="nom")
    AGE: str = Field(..., description="√¢ge")
    INTITULE_DU_POSTE: str = Field(..., description="L'intitul√© du poste recherch√©.")
    EXPERTISE: List[str] = Field(..., description="Les activit√©s et comp√©tences sp√©cifiques (par exemple, Etude de constructibilit√©, R√©solution des probl√©matiques, Leadership).")
    SECTEUR: List[str] = Field(..., description="Les domaines principaux d'expertise (par exemple, B√¢timent, Industrie, Oil & Gas).")
    METHODOLOGIE: List[str] = Field(..., description="Les m√©thodologies et outils ma√Ætris√©s (par exemple, Pack office, MS Project, Naviswork).")
    HABILITATION: List[str] = Field(..., description="Les habilitations professionnelles sp√©cifiques (par exemple, GIES 1/2, Elf Gabon HS3).")
    Projets_effectu√©s: List[Projet] = Field(..., description="Liste des projets effectu√©s avec les d√©tails de chaque mission.")
    Dipl√¥mes: List[Diplome] = Field(..., description="Liste des dipl√¥mes obtenus.")
    Langues: List[Langue] = Field(..., description="Langues parl√©es avec leur niveau de ma√Ætrise.")
    Formations_compl√©mentaires: List[FormationComplementaire] = Field(..., description="Formations compl√©mentaires suivies.")


def extract_info_from_cv(cv_text: str, language: str = "fr") -> CVInfo:
    """
    Extrait des informations structur√©es √† partir d'un texte de CV en utilisant l'API OpenAI.
    
    Arguments :
        cv_text (str) : Contenu textuel du CV.

    Retourne :
        CVInfo : Un objet Pydantic contenant les informations extraites.
    """
    system_prompt = {
        "fr": "Tu es un assistant qui aide √† extraire les informations des CV.",
        "en": "You are an assistant that helps extract information from resumes. Extract the required fields in english."
    }

    system_prompt = system_prompt.get(language, system_prompt["fr"])
    
    completion = client.chat.completions.parse(
        model="gpt-5",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": cv_text},
        ],
        response_format=CVInfo,  
    )

    parsed: CVInfo = completion.choices[0].message.parsed
    info = parsed.model_dump()

    # G√©n√©rer le trigramme localement
    prenom = info.get("PRENOM", "")
    nom = info.get("NOM", "")
    info["NOM"] = nom.upper()  # Forcer le nom en majuscule
    info["TRI"] = generate_trigramme(prenom, nom)

    # Extraire l'email via regex sur le texte du CV
    email_match = re.search(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", cv_text)
    if email_match:
        info["EMAIL"] = email_match.group(0)
    else:
        info["EMAIL"] = ""

    # Utiliser la valeur AGE extraite par l'API pour calculer l'ann√©e de naissance
    age_str = info.get("AGE", "")
    try:
        age = int(age_str)
        current_year = datetime.now().year
        info["ANNEE"] = current_year - age
    except (ValueError, TypeError):
        info["ANNEE"] = ""

    # Extraire le t√©l√©phone via regex sur le texte du CV
    tel_match = re.search(r'(\d{2}(?:[\s\.-]?\d{2}){4})', cv_text)
    if tel_match:
        # Nettoyer le num√©ro pour enlever espaces, tirets, points
        raw_tel = tel_match.group(1)
        digits = re.sub(r'[^0-9]', '', raw_tel)
        # Reformater en XX.XX.XX.XX.XX
        if len(digits) == 10:
            info["TELEPHONE"] = '.'.join([digits[i:i+2] for i in range(0, 10, 2)])
        else:
            info["TELEPHONE"] = raw_tel
    else:
        info["TELEPHONE"] = ""

    return info


def fill_word_template_with_lists(template_path, output_path, data, language="fr"):
    """
    Remplit un mod√®le Word avec des donn√©es (y compris dans l'en-t√™te),
    en rempla√ßant les placeholders et en appliquant les styles n√©cessaires.

    Arguments :
        template_path (str) : Chemin vers le mod√®le Word.
        output_path (str) : Chemin vers le fichier Word g√©n√©r√©.
        data (dict) : Donn√©es √† ins√©rer dans le fichier Word.
    """
    doc = Document(template_path)

    # --- üîπ 1. Gestion des en-t√™tes et pieds de page ---
    for section in doc.sections:
        header = section.header
        footer = section.footer

        # En-t√™te
        for paragraph in header.paragraphs:
            for key, value in data.items():
                placeholder = f"{{{{{key}}}}}"
                if placeholder in paragraph.text:
                    paragraph.text = paragraph.text.replace(placeholder, str(value))

        # Pied de page (optionnel, m√™me logique)
        for paragraph in footer.paragraphs:
            for key, value in data.items():
                placeholder = f"{{{{{key}}}}}"
                if placeholder in paragraph.text:
                    paragraph.text = paragraph.text.replace(placeholder, str(value))


    for paragraph in doc.paragraphs:
        for key, value in data.items():
            placeholder = f"{{{{{key}}}}}"  # Placeholder au format {{KEY}}

            # --- Projets effectu√©s ---
            if key == "Projets_effectu√©s" and isinstance(value, list):
                if placeholder in paragraph.text:
                    paragraph.text = ""
                    for projet in value:
                        client_nom = projet.get('CLIENT_NOM') or 'Non sp√©cifi√©'
                        dates = f"{(projet.get('DATE_DEBUT') or 'N/A')} - {(projet.get('DATE_FIN') or 'N/A')}"
                        client_date_line = f"{client_nom}\t{dates}"

                        client_date_paragraph = paragraph.insert_paragraph_before(client_date_line)
                        client_date_paragraph.style = "italique gras"

                        tab_stops = client_date_paragraph.paragraph_format.tab_stops
                        tab_stop = tab_stops.add_tab_stop(Inches(6.5))
                        tab_stop.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

                        post_paragraph = paragraph.insert_paragraph_before(projet.get('INTITULE_POSTE') or 'Non sp√©cifi√©')
                        post_paragraph.style = paragraph.style

                        paragraph.insert_paragraph_before("")

                        project_paragraph = paragraph.insert_paragraph_before(projet.get('INTITULE_PROJET') or 'Non sp√©cifi√©')
                        project_paragraph.style = paragraph.style
                        project_paragraph.runs[0].bold = True

                        details_projet = (projet.get('DETAILS_PROJET') or '').strip()
                        if details_projet:
                            project_paragraph = paragraph.insert_paragraph_before(details_projet)
                            project_paragraph.style = paragraph.style

                        paragraph.insert_paragraph_before("")

                        realizations = projet.get('REALISATION') or []
                        if realizations:
                            title_realizations = "R√©alisations :" if language == "fr" else "Achievements :"
                            realizations_paragraph = paragraph.insert_paragraph_before(title_realizations)
                            realizations_paragraph.style = paragraph.style
                            realizations_paragraph.runs[0].bold = True

                            for realization in realizations:
                                realization = (realization or '').strip()
                                if realization:
                                    realization_paragraph = paragraph.insert_paragraph_before(realization)
                                    realization_paragraph.style = "Liste √† puces1"

                            paragraph.insert_paragraph_before("")

            # --- Dipl√¥mes ---
            elif key == "Dipl√¥mes" and isinstance(value, list):
                if placeholder in paragraph.text:
                    paragraph.text = ""
                    for diplome in value:
                        diploma_line = f"{(diplome.get('ANNEE_DIPLOME') or 'N/A')}    {(diplome.get('INTITULE_DIPLOME') or 'Non sp√©cifi√©')}"
                        diploma_paragraph = paragraph.insert_paragraph_before(diploma_line)
                        diploma_paragraph.style = paragraph.style

            # --- Langues ---
            elif key == "Langues" and isinstance(value, list):
                if placeholder in paragraph.text:
                    paragraph.text = ""
                    for langue in value:
                        language_line = f"{(langue.get('LANGUE') or 'Non sp√©cifi√©')}    {(langue.get('NIVEAU') or 'Non sp√©cifi√©')}"
                        language_paragraph = paragraph.insert_paragraph_before(language_line)
                        language_paragraph.style = paragraph.style

            # --- Formations compl√©mentaires ---
            elif key == "Formations_compl√©mentaires" and isinstance(value, list):
                if placeholder in paragraph.text:
                    paragraph.text = ""
                    for formation in value:
                        formation_line = f"{(formation.get('ANNEE_FORMATION') or 'N/A')}    {(formation.get('INTITULE_FORMATION') or 'Non sp√©cifi√©')}"
                        formation_paragraph = paragraph.insert_paragraph_before(formation_line)
                        formation_paragraph.style = paragraph.style

            # --- Listes g√©n√©riques ---
            elif isinstance(value, list):
                if placeholder in paragraph.text:
                    paragraph.text = ""
                    for item in value:
                        list_paragraph = paragraph.insert_paragraph_before(str(item))
                        list_paragraph.style = paragraph.style

            # --- Valeurs simples ---
            elif placeholder in paragraph.text:
                paragraph.text = paragraph.text.replace(placeholder, str(value))

    # --- üîπ 3. Sauvegarde du fichier final ---
    doc.save(output_path)
